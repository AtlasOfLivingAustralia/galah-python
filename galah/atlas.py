'''
This is a collection of the atlas functions from the R galah package
'''

import sys,requests,urllib.parse
import pandas as pd
import galah.search as search

'''
A function to get observations of individual life forms, also known as "occurrences"

request: optional data_request object generated by a call to galah_call() (what does this mean?)
identify: data frame generated by a gall to galah_identify()
filter: data frame generated by a call to galah_filter()
geolocate: string generated by a call to galah_geolocate()

'''

'''
initial comments - get all of the species occurences 
'''
# def atlas_occurences(request=None,
#                      identify=None,
#                      filter=None,
#                      geolocate=None,
#                      select=galah_select(group="basic"),
#                      mint_doi=False,
#                      doi=None,
#                      refresh_cache=False):
#def occurrences(counts=None,species=None,taxonomy=None,media=None,filter=None,geolocate=None,select=None,mint_doi=False,doi=None,refresh_cache=False)
def occurrences(species=None,filter=None,geolocate=None,test=None):
    # request a link from the ALA website
    # get the number of occurrences
    # also implement a try/catch loop to make sure that there is a filter applied to
    # HOW TO DO FACETS: LATER

    # check if the ALA is working - if not, let the user know
    response = requests.get("https://biocache-ws.ala.org.au/ws/occurrences/search?pageSize=0")
    try:
        response.raise_for_status()
        if test is not None:
            return
    except requests.exceptions.HTTPError as e:
        print("The ALA might be down...")
        print("Error: " + str(e))
        sys.exit()

    # now, figure out how to formulate queries
    # q <== queries, i.e. q=rk_genus:Macropus; q = Macropus is a free text search
    # fq <== filters to be applied to the original query in form fq=INDEXEDFIELD:VALUE, i.e. fq=rank:kingdom

    # base response
    baseURL = "https://biocache-ws.ala.org.au/ws/occurrences/offline/download?"

    # check if
    if species is not None:
        # first test for one species
        if type(species) == str:
            baseURL += "q=genus:\"{}\"".format(species)
        # now, test for multiple species
        else:
            print("write the else loop for multiple species")

    if filter is not None:
        print("write filter loop")
    if geolocate is not None:
        print("write geolocate loop")

    # This gets the data from the CSV
    response = requests.get(baseURL)
    print(baseURL)
    #print(response)
    dataFrame=None
    if species is not None:
        dataFrame = pd.read_csv(response)
        print(dataFrame)
    elif counts:
        baseURL += "&pagesize=0"
        response = requests.get(baseURL)
        json = response.json()
        return json['totalRecords']
    else:
        # potentially Assertion error?
        raise Exception("You cannot get all 10 million records for the ALA.  Please specify either \'counts=True\'\n and/or species to get occurrence records associated with the species.")

    # Test favourite species
    # 404 error
    # response = requests.get("https://biocache-ws.ala.org.au/ws/occurrencesss/search?pageSize=0&")

    # return dataframe
    return dataFrame

'''
get counts of species

TODO: add facets (do this later)

species: a string or a list of species to get the number of counts for
'''
def counts(species=None,separate=False,verbose=False):
    # EXTRA EXTRA: get filters to look like this: https://biocache-ws.ala.org.au/ws/occurrence/search?fq=%28year%3A2021%29&pageSize=0
    # do this

    # get the baseURL for getting total number of records
    baseURL = "https://biocache-ws.ala.org.au/ws/occurrence/search?"

    # if there is no species, assume you will get the total number of records in the ALA
    if species is None:
        baseURL += "pageSize=0"
        response = requests.get(baseURL)
        # get the json
        json = response.json()
        # return total number of records for the species
        return json['totalRecords']
    # if there is a single species, get
    elif type(species) == str:
        # use search.taxa() first, and then get taxonConceptID and pass to URL
        taxonConceptID=search.taxa(species)['taxonConceptID'][1]
        # TODO: look up URL encoder for Python
        # fq=(lsid:taxonConceptID)
        baseURL += "fq=%28lsid%3A" + urllib.parse.quote(taxonConceptID)
        # tell the API to get only counts
        baseURL += "%29&pageSize=0"
        if verbose:
            print("URL for querying:\n\n{}\n".format(baseURL))
        # query the API
        response = requests.get(baseURL)
        # get the json
        json = response.json()
        # return total number of records for the species
        dataFrame = pd.DataFrame({'totalRecords': [json['totalRecords']]})
        return dataFrame
    # now, test for multiple species
    elif type(species) == list:
        totalRecords=0
        tempTotalRecords=[]
        # first, test out with adding them together
        for name in species:
            taxonConceptID = search.taxa(name)['taxonConceptID'][1]
            URL = baseURL + "fq=%28lsid%3A" + urllib.parse.quote(taxonConceptID)
            # tell the API to get only counts
            URL += "%29&pageSize=0"
            if verbose:
                print("URL for querying:\n\n{}\n".format(URL))
            response = requests.get(URL)
            json = response.json()
            if separate:
                tempTotalRecords.append(int(json['totalRecords']))
            else:
                totalRecords += int(json['totalRecords'])
        if separate:
            dataFrame = pd.DataFrame({'Species': species, 'totalRecords': tempTotalRecords})
        else:
            dataFrame = pd.DataFrame({'totalRecords': [totalRecords]})
        return dataFrame
    else:
        raise TypeError("The species argument can only be a string or a list."
                        "\nExample: atlas.counts(\"Vulpes vulpes\")"
                        "\n         atlas.counts[\"Osphranter rufus\",\"Vulpes vulpes\",\"Macropus giganteus\",\"Phascolarctos cinereus\"])")

'''
# this function does X
def species():
    # search taxonomic trees
    
# this function does X
def taxonomy():
    # search taxonomic trees

# this function does X    
def media():
    # download sound, images etc.

# this function does X    
def citation():
    # generate citation for occurrence data
'''
